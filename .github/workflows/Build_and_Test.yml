name: Master Branch

on:
  push:
    branches:
      - 'main'

jobs:

  test:
    name: Test - Units & Integrations
    runs-on: ubuntu-18.04

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        ports:
          - "5432:5432"
        env:
          POSTGRES_HOST: "localhost"
          POSTGRES_USER: "admin"
          POSTGRES_PASSWORD: "01234Admin"
          POSTGRES_DB: "wallet_api_dev"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Maven Package
        run: mvn -B clean package -DskipTests
      - name: Maven Verify
        run: mvn -B clean verify -Pintegration-test

  sonar:
    name: Test - SonarCloud Scan
    runs-on: ubuntu-18.04

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        ports:
          - "5432:5432"
        env:
          POSTGRES_HOST: "localhost"
          POSTGRES_USER: "admin"
          POSTGRES_PASSWORD: "01234Admin"
          POSTGRES_DB: "wallet_api_dev"
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: SonarCloud Scan
        run: mvn -B clean verify test -Psonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  artifact:
    name: Publish - GitHub Packages
    runs-on: ubuntu-18.04
    needs: [test, sonar]

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Publish artifact on GitHub Packages
        run: mvn -B clean deploy -Pskip-spotify -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-18.04
    needs: [test, sonar]
    env:
      REPO: ${{ secrets.DOCKER_REPO }}

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
      - name: Build jar
        run: mvn -B clean install -DskipTests
      - name: Build Docker image
        run: docker build -t $REPO:latest -t $REPO:${GITHUB_SHA::8} .
      - name: Publish Docker image
        run: docker push $REPO

  heroku:
    name: Build and push to Heroku
    needs: [artifact, docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Login to Heroku Container registry
      - uses: akhileshns/heroku-deploy@v3.8.9
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.EMAIL}}
          healthcheck: "https://${{secrets.HEROKU_APP_NAME}}.herokuapp.com/health"
          usedocker: true
#    steps:
#      - name: Update Heroku
#        env:
#          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
##        run: sudo apt update && sudo apt install heroku
#        run: curl https://cli-assets.heroku.com/install.sh | sh
#      - uses: actions/checkout@v1
#      - name: Login to Heroku Container registry
#        env:
#          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#        run: heroku container:login
#      - name: Build and push
#        env:
#          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#        run: heroku container:push -a ${{ secrets.HEROKU_APP_NAME }} web
#      - name: Release
#        env:
#          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
#        run: heroku container:release -a ${{ secrets.HEROKU_APP_NAME }} web

